#+TITLE: Let It Be Lambda (λ)
#+AUTHOR: Gerd Heber
#+EMAIL: gheber@hdfgroup.org
#+DATE: 08 January 2021
#+STARTUP: overview

#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper, 12pt]
#+LATEX_HEADER: \usepackage[a4paper,top=1cm,bottom=1cm,left=1cm,right=1cm]{geometry}

#+PROPERTY: header-args :eval never-export

*Book recommendation:* [[https://letoverlambda.com/][Let Over Lambda—50 Years of Lisp]] by [[https://hoytech.com/about][Doug Hoyte]]

* Peculiarities of Org-Mode C Code Blocks

My starting point is Derek Feichtinger's [[https://github.com/dfeich/org-babel-examples/blob/master/C/c-babel.org][discussion]] and the official [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html][C, C++, D
Source Code Blocks in Org Mode]]. Considering how much boilerplate there is to C
code, Org Babel does a decent job in bringing some literacy to the picture. We
get [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb syntax]], can pass variables by header arguments, and can =CALL= source
blocks as functions. However, an unpleasant side-effect of those parameters is
the creation of /global variables/ in the tangled C code, which makes me
uncomfortable. (OCD?)

In C, nothing prevents us from reducing some boilerplate through a strict
block-local variables discipline. From the perspective of structuring a larger
piece of C code that's not sufficient though, because it casts a shadow of
obscurity over code blocks due to potential references to variables outside the
block scope. Looking at a noweb reference such as =<<block>>=, I can't really
tell which variables from the current lexical scope it references. Conversely,
when implementing the code behind =<<block>>=, I don't remember anymore what is
in referents' scope. Ideally, there would be a way to pass arguments, and there
is, but the price, currently, are global variables. They say that we can't have
\lambda-functions in C, but what's holding us back?

*  Lambda Helper

For this collection, we've wrapped standard headers and macros into a single
header file called [[file:./src/literate-hdf5.h][literate-hdf5.h]].

#+header: :main no
#+begin_src C -r -n :tangle src/literate-hdf5.h :noweb yes :exports none

#ifndef LITERATE_HDF5_H
#define LITERATE_HDF5_H

<<boilerplate>>

#endif

#+end_src

These are the standard header files included.

#+begin_src C :noweb-ref boilerplate

#include "hdf5.h"

#include <stdio.h>
#include <stdlib.h>

#+end_src

The more interesting bit is the =lambda= macro by [[https://hackaday.com/2019/09/11/lambdas-for-c-sort-of/][Al Williams]].

#+begin_src C -n :noweb-ref boilerplate

#define lambda(lambda$_ret, lambda$_args, lambda$_body) \
  ({                                                    \
    lambda$_ret lambda$__anon$ lambda$_args             \
      lambda$_body                                      \
      &lambda$__anon$;                                  \
  })

  #+end_src

It uses two features of GNU C (=--std=gnu99=), namely, [[http://gcc.gnu.org/onlinedocs/gcc/Nested-Functions.html][nested functions]] and
[[https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html][statement expressions]], which lets us wrap C code blocks as "lambda functions",
thereby making longer pieces of code easier to follow and digest.

#+begin_example

lambda(<return type>, ([type1 arg1, type2 arg2, ...]), { <lambda body>  })

#+end_example

Such a =lambda= can then be invoked like a C-function pointer:

#+header: :flags "-I./src" :libs "-lhdf5"
#+begin_src C -r -n :tangle src/lambda.c :exports both

#include "literate-hdf5.h"

int main()
{
  unsigned majnum, minnum, relnum;
  H5get_libversion(&majnum, &minnum, &relnum);

  printf
    ("%f\n",
     (*lambda(float, (float x), { return x*x; })) (majnum+minnum+relnum)
     );

  return 0;
}

#+end_src

#+RESULTS:
: 196.0

I can live with that, because now I can break this up into:

#+header: :flags "-I./src" :libs "-lhdf5"
#+begin_src C -r -n :tangle src/lambda-noweb.c :noweb yes :exports both

#include "literate-hdf5.h"

int main()
{
  unsigned majnum, minnum, relnum;
  H5get_libversion(&majnum, &minnum, &relnum);

  printf
    ("%f\n",
     (*
      <<lambda-square>>) (majnum+minnum+relnum)
     );

  return 0;
}

#+end_src

#+RESULTS:
: 196.0

and

#+begin_src C -r -n :noweb-ref lambda-square
lambda (float, (float x),
        {
          return x*x;
        })
#+end_src

No global variables and no obscure references!

* COMMENT Local Variables

# Local Variables:
# org-coderef-label-format: "// (ref:%s)"
# End:
